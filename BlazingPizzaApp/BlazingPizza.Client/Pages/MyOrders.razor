@page "/myorders"

@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider

    <div class="main">

        @if (ordersWithStatus == null)
        {
            <text>Loading...</text>
        }
        else if (ordersWithStatus.Count == 0)
        {
            <h2>No orders placed</h2>
            <a class="btn btn-success" href="">Order some pizza</a>
        }
        else
        {
            <text>
                <div class="list-group orders-list">
                    @foreach (var item in ordersWithStatus)
                    {
                    <div class="list-group-item">
                        <div class="col">
                            <h5>
                                @item.Order.CreatedTime.ToLongDateString()
                            </h5>
                            Items:
                            <strong>
                                @item.Order.Pizzas.Count()
                            </strong>
                            Total price:
                            <strong>
                                £@item.Order.GetFormattedTotalPrice()
                            </strong>
                        </div>
                        <div class="col">
                            Status: 
                            <strong>
                                @item.StatusText
                            </strong>
                        </div>
                        <div class="col flex-grow-0">
                            <a href="myorders/@item.Order.OrderId" class="btn btn-success">
                                Track &gt;
                            </a>
                        </div>
                    </div>
                    }
                </div>
            </text>
        }

    </div>

@code
{
    List<OrderWithStatus> ordersWithStatus;

    protected override async Task OnParametersSetAsync()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var accessToken))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "orders");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken.Value);
            var response = await HttpClient.SendAsync(request);
            ordersWithStatus = await response.Content.ReadFromJsonAsync<List<OrderWithStatus>>();
        }
        else
        {
            NavigationManager.NavigateTo(tokenResult.RedirectUrl);
        }
    }
}
