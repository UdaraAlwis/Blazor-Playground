@page "/myorders"

@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider

    <div class="main">

        <TemplatedList Loader="@LoadOrders" ListGroupClass="orders-list">
            <Loading>Loading...</Loading>
            <Empty>
                <h2>No orders placed</h2>
                <a class="btn btn-success" href="">Order some pizza</a>
            </Empty>
            <Item Context="item">
                <div class="col">
                    <h5>@item.Order.CreatedTime.ToLongDateString()</h5>
                    Items:
                    <strong>@item.Order.Pizzas.Count()</strong>;
                    Total price:
                    <strong>£@item.Order.GetFormattedTotalPrice()</strong>
                </div>
                <div class="col">
                    Status: <strong>@item.StatusText</strong>
                </div>
                <div class="col flex-grow-0">
                    <a href="myorders/@item.Order.OrderId" class="btn btn-success">
                        Track &gt;
                    </a>
                </div>
            </Item>
        </TemplatedList>

    </div>

@code
{
    List<OrderWithStatus> ordersWithStatus;

    async Task<List<OrderWithStatus>> LoadOrders()
    {
        await Task.Delay(3000);

        var tokenResult = await TokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var accessToken))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "orders");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken.Value);
            var response = await HttpClient.SendAsync(request);
            ordersWithStatus = await response.Content.ReadFromJsonAsync<List<OrderWithStatus>>();
        }
        else
        {
            NavigationManager.NavigateTo(tokenResult.RedirectUrl);
        }

        return ordersWithStatus;
    }
}
