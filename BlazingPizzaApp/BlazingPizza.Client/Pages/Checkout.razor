@page "/checkout"

@attribute [Authorize]
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager 
@inject IAccessTokenProvider TokenProvider

    <div class="main">
        <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
            <div class="checkout-cols">
                <div class="checkout-order-details">
                    <h4>Review Order</h4>
                    <OrderReview Order="OrderState.Order" />
                </div>

                <div class="checkout-delivery-address">
                    <h4>Deliver to...</h4>
                    <AddressEditor Address="OrderState.Order.DeliveryAddress" />
                </div>
            </div>

            <button type="submit" class="@(isSubmitting ? "checkout-button btn btn-warning disabled" : "checkout-button btn btn-warning")">
                Place order
            </button>

            <DataAnnotationsValidator />
        </EditForm>
    </div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    bool isSubmitting;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            // The server won't accept orders from unauthenticated users, so avoid
            // an error by making them log in at this point
            NavigationManager.NavigateTo("authentication/login?redirectUri=/checkout", true);
        }
    }

    async Task PlaceOrder()
    {
        isSubmitting = true;

        await Task.Delay(5000); // Wait 5 seconds

        var tokenResult = await TokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var accessToken))
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "orders");
            request.Content = JsonContent.Create(OrderState.Order);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken.Value);
            var response = await HttpClient.SendAsync(request);
            var newOrderId = await response.Content.ReadFromJsonAsync<int>();
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        else
        {
            NavigationManager.NavigateTo(tokenResult.RedirectUrl);
        }

        isSubmitting = false;
    }
}
