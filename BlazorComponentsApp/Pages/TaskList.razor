<h3>@(Name)'s TaskList</h3>

@if (taskItemList.Count > 0)
{
    <div class="progress my-2">
        <div class="progress-bar" role="progressbar"
             style="width: @(percentDone)%" aria-valuemin="0" aria-valuemax="100" >
            @(percentDone)
        </div>
    </div>
}

<EditForm class="form-inline my-2"  Model="@newTaskItem" OnValidSubmit="@AddNewTask" >
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input class="form-control mx-2" type="text" @bind-value="newTaskItem.TaskTitle" />

    <button type="submit" class="btn btn-outline-primary" >Add Task</button>

</EditForm>

<ul class="list-group">
    @foreach (var task in taskItemList)
    {
        if (task.IsComplete)
        {
            <li class="list-group-item list-group-item-success my-1"
                @onclick="(() => { task.IsComplete = !task.IsComplete; })">
                <del>
                    @task.TaskTitle
                </del>
            </li>
        }
        else
        {
            <li class="list-group-item list-group-item-secondary my-1"
                @onclick="(() => { task.IsComplete = !task.IsComplete; })">
                    @task.TaskTitle
            </li>
        }

    }
</ul>

@code {

    private List<TaskItem> taskItemList = new List<TaskItem>();
    private TaskItem newTaskItem = new TaskItem();

    [Parameter]
    public string Name { get; set; }

    public int percentDone 
    { 
        get
        {
            return ((taskItemList.Count(x => x.IsComplete) * 100) / taskItemList.Count);
        } 
    }

    private void AddNewTask()
    {
        taskItemList.Add(newTaskItem);

        newTaskItem = new TaskItem();
    }
}
